COLUMN-ORIENTED DATABASE

Traditional relational databases are row-oriented, with each row having a row-id and each field within the row stored together in a table. =

Every time you look something up in a row-oriented database, every row is scanned, regardless of which columns you require. 
|  |column-oriented databases  |
|--|--|
| Benefits | High performance on aggregation queries (like COUNT, SUM, AVG, MIN, MAX) <br> Highly efficient data compression and/or partitioning<br>True scalability and fast data loading for Big Data<br>Accessible by many 3rd  party BI analytic tools <br> Fairly simple systems administration
| advantages for certain types of systems|Data Warehouses and Business Intelligence<br>Customer Relationship Management (CRM)<br>Library Card Catalogs<br>Ad hoc query systems
|Disadvantages|Transactions are to be avoided or just not supported<br>Queries with table joins can reduce high performance<br> Record updates and deletes reduce storage efficiency<br> Effective partitioning/indexing schemes can be difficult to design
References
[dzone](https://dzone.com/articles/nosql-database-types-1#:~:text=There%20are%20four%20big%20NoSQL,are%20often%20combinations%20of%20these.)

[dbbest](https://www.dbbest.com/blog/column-oriented-database-technologies/)
<!--stackedit_data:
eyJoaXN0b3J5IjpbNzY0MTU5OTE5LC0xODEwNzA0NjU1LC01Mz
U4Njg5ODMsLTMyNTQ5Njk0NCw4ODYzNzkzMDgsMTYwMzEyMjQ4
MCwxNjAzMTIyNDgwXX0=
-->